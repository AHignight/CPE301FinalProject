// Name: Andrew Hignight, Mathew Rios, Ean McNeil, Michael Wang
// Date: 12/1/2022

// Define data registers and ports
#define SET_OUTPUT(ddr, pin) *ddr |= (0x01 << pin);
#define SET_INPUT(ddr, pin) *ddr &= ~(0x01 << pin);
#define SET_HIGH(port, pin) *port |= (0x01 << pin);
#define SET_LOW(port, pin) *port &= ~(0x01 << pin);

// Port A Register
volatile unsigned char* port_A = (unsigned char*) 0x22;
volatile unsigned char* ddr_A = (unsigned char*) 0x21;
volatile unsigned char* pin_A = (unsigned char*) 0x20;

// Port B Register
volatile unsigned char* port_b = (unsigned char*) 0x25;
volatile unsigned char* ddr_b = (unsigned char*) 0x24;
volatile unsigned char* pin_b = (unsigned char*) 0x23;

// Define Port F Register Pointers
volatile unsigned char* port_f = (unsigned char*) 0x11; 
volatile unsigned char* ddr_f  = (unsigned char*) 0x10; 
volatile unsigned char* pin_f  = (unsigned char*) 0x0F; 

// Port L Registers
volatile unsigned char* port_l = (unsigned char*) 0x10B;
volatile unsigned char* ddr_l = (unsigned char*) 0x10A;
volatile unsigned char* pin_l = (unsigned char*) 0x109;

//set port d

// ADC Register 
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned char* my_ADC_Data = (unsigned char*) 0x78;

// ISR Register
volatile unsigned char* my_ECIRA = (unsigned char*) 0x69;
volatile unsigned char* my_EIMSK = (unsigned char*) 0x3D;
int count = 0;

// Bool Functions
bool DISABLED_ST, IDLE_ST, RUNNING_ST, ERROR_ST;

//Stepper Motor
const int stepsPerRev = 256;
Stepper myStepper(stepsPerRev, 8, 9, 10, 11); //initializes stepper motor on pins 8-11


// Definitions libraries, global definitions and declarations, ISR function, etc
int current_state;
int state_change = 0;
float Threshold_Temperature = 20;
char daysOfTheWeek[7][12] = ("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");

// ISR 
ISR(INT2_vect){
count ++;
state_change = 1;

if(count%2 == 1) {
	DISABLED_ST = false;
	RUNNING_ST = false;
	ERROR_ST = false;
	IDLE_ST = true;
}
else {
	IDLE_ST = false;
	RUNNING_ST = false;
	ERROR_ST = false;
	DISABLED_ST = true;
}
} 

void setup() {

  //Stepper Motor
  myStepper.setSpeed(32); //sets stepper motor speed to 60 rpm
  SET_INPUT((unsigned char*) 0x10A, 0); //PL0 set as input
  SET_INPUT((unsigned char*) 0x10A, 1); //PL1 sets as input

  Serial.begin(9600);
}
void loop() {

  //Stepper Motor 
  if (*pin_l & 0x01){
    Serial.print("rotate ");
    // 2048 / 8 = 256
    // This is how many steps per revolution to create a 45 degree angle per button press
    Serial.print(stepsPerRev / 5.68889 ); 
    Serial.println("° clockwise");
    myStepper.step(-stepsPerRev); //negative value sends stepPerRev in reverse direvtion
    delay(500);
  }
 else if (*pin_l & 0x02){

    Serial.print("rotate ");
    Serial.print(stepsPerRev / 5.68889 );
    Serial.println("° counter-clockwise");
    myStepper.step(stepsPerRev);
    delay(500);
  }

}
